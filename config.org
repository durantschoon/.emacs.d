#+TITLE: Emacs Configuration
#+AUTHOR: Durant Schoon

* Introduction
** Setup Instructions

   This file was created with boilerplate files described in the video
   [[https://www.youtube.com/watch?v=aweXk-MHaG8&list=PLvu0mAXg6ynG7GgSZVxWePuY-Q5mSqha9][here]]. If you're just getting started with emacs, you might want to
   start with some videos I made with my friend Daniel Mai.
   Unfortunately we lost our original playlists, but we've uploaded
   what we'd saved as these three playlists (we plan to add video
   descriptions again soon):

   - [[https://www.youtube.com/playlist?list=PLvu0mAXg6ynFaxemV3w9YcDm1wo46w1Z7][Installation]]
   - [[https://www.youtube.com/playlist?list=PLvu0mAXg6ynG7GgSZVxWePuY-Q5mSqha9][Configuration]]
   - [[https://www.youtube.com/playlist?list=PLvu0mAXg6ynFOQrdYy4sf7e3lRpM2kiUd][Modes]]

   This is how I installed emacs on my mac with homebrew:

#+BEGIN_SRC sh
brew install emacs --with-cocoa --with-gnutls --with-rsvg --with-imagemagick
# "brew linkapps emacs" no longer works
sudo ln -s /usr/local/Cellar/emacs/26.1_1/Emacs.app /Applications 
#+END_SRC

   Then to upgrade

#+BEGIN_SRC sh
brew upgrade emacs --with-cocoa --with-gnutls --with-imagemagick
#+END_SRC

** Personal Information

  I'm using `concat` so the bots don't find my entire email address
  and spam me.

#+begin_src emacs-lisp
  (setq user-full-name "Durant Schoon"
        user-mail-address (concat "durant.schoon" "@" "gmail.com"))
#+end_src

** Customize settings

Set up the customize file to its own separate file, instead of saving
customize settings in [[file:init.el][init.el]].

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+end_src

* Approach

You don't need to read this section. It's mostly me thinking outloud
about how to solve certain problems with my emacs configuration.

** Solving: Use emacs from multiple machines (solves private files).
*** Current Solution: Use dropbox

I define a list of elisp files I keep on dropbox which I do not want
in my git repository, e.g. private.el. Remember to git ignore them!
(with 'i' in magit with the cursor on the file name under Unstaged
changes). 

I used to load directly from dropbox, but this will copy over the file
the first time I run emacs on a new machine assuming dropbox is set up
first.

#+BEGIN_SRC emacs-lisp
  (progn
    (let ((private-emacs-files '("private.el"))
          (private-emacs-from-dir "~/Dropbox/emacs/")
          (private-emacs-to-dir user-emacs-directory))
      (dolist (filename private-emacs-files)
        (let ((copy-from (concat private-emacs-from-dir filename))
              (copy-to (concat private-emacs-to-dir filename)))
          (if (and (file-exists-p copy-from)
               (not (file-exists-p copy-to)))
              (progn
                (message (concat "copying " copy-from " to " copy-to))
                (copy-file copy-from copy-to)))))))
#+END_SRC

* Settings
** Sane defaults

Let's start with some sane defaults, shall we?

Sources for this section include [[https://github.com/magnars/.emacs.d/blob/master/settings/sane-defaults.el][Magnars Sveen]] and [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]].

#+begin_src emacs-lisp
  ;; These functions are useful. Activate them.
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
  ;; Remember
  ;; C-x n n
  ;;   Narrow down to between point and mark (narrow-to-region).
  ;;   This can really freak you out, don't enable it unless you
  ;;   practice getting out of it.
  ;; C-x n w
  ;;   Widen to make the entire buffer accessible again (widen).
  (put 'dired-find-alternate-file 'disabled nil)

  ;; Answering just 'y' or 'n' will do
  (defalias 'yes-or-no-p 'y-or-n-p) ;; "No me rompas las pelotas" cr

  ;; Keep all backup and auto-save files in one directory
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

  ;; UTF-8 please
  (setq locale-coding-system 'utf-8) ; pretty
  (set-terminal-coding-system 'utf-8) ; pretty
  (set-keyboard-coding-system 'utf-8) ; pretty
  (set-selection-coding-system 'utf-8) ; please
  (prefer-coding-system 'utf-8) ; with sugar on top
  (setq-default indent-tabs-mode nil)
  (setq-default indicate-empty-lines t)

  ;; Turn off the blinking cursor
  (blink-cursor-mode -1)

  ;; Don't count two spaces after a period as the end of a sentence.
  ;; Just one space is needed.
  (setq sentence-end-double-space nil)

  ;; delete the region when typing, just like as we expect nowadays.
  (delete-selection-mode t)

  (show-paren-mode t)

  (column-number-mode t)

  (global-visual-line-mode)
  (diminish 'visual-line-mode) ; remove this from the mode-line display

  (setq uniquify-buffer-name-style 'forward)

  ;; -i gets alias definitions from .bash_profile
  (setq shell-command-switch "-ic")

  ;; Don't beep at me
  ;; (setq visible-bell t)
  ;; because of a bug in El Capitan, setting this to nil
  (setq visible-bell nil)

#+end_src
** Package management
*** add marmalade repo for additional packages

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (package-initialize)
  (add-to-list 'package-archives
               '("marmalade" . "http://marmalade-repo.org/packages/") t)
#+END_SRC

*** manually add elpa dir 

    I don't think I need this

    #+BEGIN_SRC emacs-lisp :tangle no
      (let ((default-directory "~/.emacs.d/elpa/"))
        (normal-top-level-add-subdirs-to-load-path))
    #+END_SRC

** Global Key Bindings (Alphabetical by description)
*** Completion

    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-M-/") 'comint-dynamic-complete-filename)
    #+END_SRC

*** Darwin, OS X

    ;; key bindings
    ;; http://ergoemacs.org/emacs/emacs_hyper_super_keys.html

    #+BEGIN_SRC emacs-lisp
      (when (eq system-type 'darwin)          ; mac specific settings
        ;; ---------- REMAP KEYS ----------
        ;; (setq mac-option-modifier 'alt)    ; not needed, I think
        (setq mac-command-modifier 'meta)
        (setq mac-option-modifier 'super)     ; make opt key do Super
        (setq mac-control-modifier 'control)  ; make Control key do Control
        (setq ns-function-modifier 'hyper)    ; make Fn key do Hyper
        ;; ---------- SCROLLING ----------    ; for trackpads
        (global-set-key [wheel-right] 'scroll-left)
        (global-set-key [wheel-left] 'scroll-right)
        )
      (global-set-key [kp-delete] 'delete-char) ;; sets fn-delete to be right-delete
    #+END_SRC

*** occur-dwim

The following function for ~occur-dwim~ is taken from [[https://github.com/abo-abo][Oleh Krehel]] from
[[http://oremacs.com/2015/01/26/occur-dwim/][his blog post at "(or emacs"]]. It takes the current region or the symbol
at point as the default value for occur.

#+begin_src emacs-lisp
  (defun occur-dwim ()
    "Call `occur' with a sane default."
    (interactive)
    (push (if (region-active-p)
              (buffer-substring-no-properties
               (region-beginning)
               (region-end))
            (let ((sym (thing-at-point 'symbol)))
              (when (stringp sym)
                (regexp-quote sym))))
          regexp-history)
    (call-interactively 'occur))

  (bind-key "M-s o" 'occur-dwim)
#+end_src

*** frames (really windows) and windows (really panes)

    #+BEGIN_SRC emacs-lisp
            ;;; windowsandframes.el
            ;;; Commentary:
            ;;; Code:

            ;;; Windows (known as 'frames' in emacs)

            ;;; Code:
      (when (eq system-type 'darwin)          ; mac specific settings
        (global-set-key "\M-`" 'other-frame)  ; act like other mac programs
        )

            ;;; Panes/Frames (known as 'windows' in emacs)

      ;; clearly my intuition for up and down are reversed
      (global-set-key [(meta down)] 'scroll-other-window)    ; C-M-v
      (global-set-key [(meta up)] 'scroll-other-window-down) ; C-M-S-v

      (global-set-key (kbd "C-x 4 o") 'switch-to-buffer-other-window-return)
      (global-set-key (kbd "C-x 4 k") 'kill-buffer-other-window)

      (defun switch-to-buffer-other-window-return ()
        "Like `switch-to-buffer-other-window`, but return to original buffer."
        (interactive)
        (switch-to-buffer-other-window (other-buffer))
        (other-window 1))

      (defun kill-buffer-other-window ()
        "Kill the buffer in the other window.
      I usually work with 2 windows side by side so when I do anything
      that opens a buffer in the other window (eg. looking at a function
      definition), I'll want to kill it after when I'm done. That's when
      I use kill-buffer-other-window."
        (interactive)
        (other-window 1)
        (kill-buffer (current-buffer))
        (other-window 1))

        #+END_SRC

*** Function Keys (f1-f4: defined by emacs f5-...: user customization)

    #+BEGIN_SRC emacs-lisp
      (global-set-key [f5] 'global-whitespace-mode)
      (global-set-key [f6] 'toggle-truncate-lines)
    #+END_SRC

*** search

    Testing this. I'm not convinced I like everything about it.
    phi-search works with multiple cursors.

    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-s") 'phi-search)
      (global-set-key (kbd "C-r") 'phi-search-backward)
    #+END_SRC

*** web

    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-c o") 'browse-url-at-point) ; like "o"pen
    #+END_SRC

*** web development

    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "H-o") 'browse-url-of-buffer) ; like "o"pen
    #+END_SRC

*** zap-up-to-char
    
    From [[https://www.emacswiki.org/emacs/ZapUpToChar][ZapUpToChar]] (replaces zap-to-char so it doesn't zap the char itself)

    #+BEGIN_SRC emacs-lisp
      (defadvice zap-to-char (after my-zap-to-char-advice (arg char) activate)
        "Kill up to the ARG'th occurence of CHAR, and leave CHAR. If
        you are deleting forward, the CHAR is replaced and the point is
        put before CHAR"
        (insert char)
        (if (< 0 arg) (forward-char -1)))
    #+END_SRC

** Mouse

   #+BEGIN_SRC emacs-lisp
     ;; from the iterm2 FAQ, how to use the mouse in emacs in iterm
     ;; should I make this darwin specific?
     (require 'mouse)
     (xterm-mouse-mode t)
     (defun track-mouse (e) "Make an empty 'track-mouse' function for event E.")
   #+END_SRC

** Programming

   #+BEGIN_SRC emacs-lisp
     (defun my-prog-mode-hook ()
       (linum-mode 1)
       (message "Truncating long lines in programming mode...")
       (toggle-truncate-lines t))
     (add-hook 'prog-mode-hook 'my-prog-mode-hook)
   #+END_SRC

** IN_PROGRESS Fonts
   :PROPERTIES: 
   :Visibility: CHILDREN
   :END:
*** OFF - Testing Hasklig but only on Mac 
    
#+BEGIN_SRC emacs-lisp :tangle no
  (when (eq system-type 'darwin)
    (set-frame-font "Hasklig"))
#+END_SRC

*** OFF - Test Fira Code

   The [[https://github.com/tonsky/FiraCode][Fira Code]] font has ==> cool ligatures <== ! I followed these
   [[https://github.com/tonsky/FiraCode/wiki/Setting-up-Emacs][instructions]] including the imporant recommendation to comment out
   the '(46 .' line below.

   DEBUG: The following code works setting the default font to fira
   code, however when I type C-' in a source block emacs hangs :(

**** OFF - First test

#+BEGIN_SRC emacs-lisp :tangle no
  (when (window-system)
    (set-default-font "Fira Code"))
  (let ((alist '((33 . ".\\(?:\\(?:==\\|!!\\)\\|[!=]\\)")
                 (35 . ".\\(?:###\\|##\\|_(\\|[#(?[_{]\\)")
                 (36 . ".\\(?:>\\)")
                 (37 . ".\\(?:\\(?:%%\\)\\|%\\)")
                 (38 . ".\\(?:\\(?:&&\\)\\|&\\)")
                 (42 . ".\\(?:\\(?:\\*\\*/\\)\\|\\(?:\\*[*/]\\)\\|[*/>]\\)")
                 (43 . ".\\(?:\\(?:\\+\\+\\)\\|[+>]\\)")
                 (45 . ".\\(?:\\(?:-[>-]\\|<<\\|>>\\)\\|[<>}~-]\\)")
                 ;; (46 . ".\\(?:\\(?:\\.[.<]\\)\\|[.=-]\\)")
                 (47 . ".\\(?:\\(?:\\*\\*\\|//\\|==\\)\\|[*/=>]\\)")
                 (48 . ".\\(?:x[a-zA-Z]\\)")
                 (58 . ".\\(?:::\\|[:=]\\)")
                 (59 . ".\\(?:;;\\|;\\)")
                 (60 . ".\\(?:\\(?:!--\\)\\|\\(?:~~\\|->\\|\\$>\\|\\*>\\|\\+>\\|--\\|<[<=-]\\|=[<=>]\\||>\\)\\|[*$+~/<=>|-]\\)")
                 (61 . ".\\(?:\\(?:/=\\|:=\\|<<\\|=[=>]\\|>>\\)\\|[<=>~]\\)")
                 (62 . ".\\(?:\\(?:=>\\|>[=>-]\\)\\|[=>-]\\)")
                 (63 . ".\\(?:\\(\\?\\?\\)\\|[:=?]\\)")
                 (91 . ".\\(?:]\\)")
                 (92 . ".\\(?:\\(?:\\\\\\\\\\)\\|\\\\\\)")
                 (94 . ".\\(?:=\\)")
                 (119 . ".\\(?:ww\\)")
                 (123 . ".\\(?:-\\)")
                 (124 . ".\\(?:\\(?:|[=|]\\)\\|[=>|]\\)")
                 (126 . ".\\(?:~>\\|~~\\|[>=@~-]\\)")
                 )
               ))
    (dolist (char-regexp alist)
      (set-char-table-range composition-function-table (car char-regexp)
                            `([,(cdr char-regexp) 0 font-shape-gstring]))))

    (add-hook 'helm-major-mode-hook
      (lambda ()
        (setq auto-composition-mode nil)))
#+END_SRC

**** OFF - Second test

From updated [page](https://github.com/tonsky/FiraCode/wiki/Emacs-instructions)

#+BEGIN_SRC emacs-lisp :tangle no
  ;;; Fira code
  ;; This works when using emacs --daemon + emacsclient
  (add-hook 'after-make-frame-functions (lambda (frame) (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol")))
  ;; This works when using emacs without server/client
  (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol")
  ;; I haven't found one statement that makes both of the above situations work, so I use both for now

  (defconst fira-code-font-lock-keywords-alist
    (mapcar (lambda (regex-char-pair)
              `(,(car regex-char-pair)
                (0 (prog1 ()
                     (compose-region (match-beginning 1)
                                     (match-end 1)
                                     ;; The first argument to concat is a string containing a literal tab
                                     ,(concat "   " (list (decode-char 'ucs (cadr regex-char-pair)))))))))
            '(("\\(www\\)"                   #Xe100)
              ("[^/]\\(\\*\\*\\)[^/]"        #Xe101)
              ("\\(\\*\\*\\*\\)"             #Xe102)
              ("\\(\\*\\*/\\)"               #Xe103)
              ("\\(\\*>\\)"                  #Xe104)
              ("[^*]\\(\\*/\\)"              #Xe105)
              ("\\(\\\\\\\\\\)"              #Xe106)
              ("\\(\\\\\\\\\\\\\\)"          #Xe107)
              ("\\({-\\)"                    #Xe108)
              ("\\(\\[\\]\\)"                #Xe109)
              ("\\(::\\)"                    #Xe10a)
              ("\\(:::\\)"                   #Xe10b)
              ("[^=]\\(:=\\)"                #Xe10c)
              ("\\(!!\\)"                    #Xe10d)
              ("\\(!=\\)"                    #Xe10e)
              ("\\(!==\\)"                   #Xe10f)
              ("\\(-}\\)"                    #Xe110)
              ("\\(--\\)"                    #Xe111)
              ("\\(---\\)"                   #Xe112)
              ("\\(-->\\)"                   #Xe113)
              ("[^-]\\(->\\)"                #Xe114)
              ("\\(->>\\)"                   #Xe115)
              ("\\(-<\\)"                    #Xe116)
              ("\\(-<<\\)"                   #Xe117)
              ("\\(-~\\)"                    #Xe118)
              ("\\(#{\\)"                    #Xe119)
              ("\\(#\\[\\)"                  #Xe11a)
              ("\\(##\\)"                    #Xe11b)
              ("\\(###\\)"                   #Xe11c)
              ("\\(####\\)"                  #Xe11d)
              ("\\(#(\\)"                    #Xe11e)
              ("\\(#\\?\\)"                  #Xe11f)
              ("\\(#_\\)"                    #Xe120)
              ("\\(#_(\\)"                   #Xe121)
              ("\\(\\.-\\)"                  #Xe122)
              ("\\(\\.=\\)"                  #Xe123)
              ("\\(\\.\\.\\)"                #Xe124)
              ("\\(\\.\\.<\\)"               #Xe125)
              ("\\(\\.\\.\\.\\)"             #Xe126)
              ("\\(\\?=\\)"                  #Xe127)
              ("\\(\\?\\?\\)"                #Xe128)
              ("\\(;;\\)"                    #Xe129)
              ("\\(/\\*\\)"                  #Xe12a)
              ("\\(/\\*\\*\\)"               #Xe12b)
              ("\\(/=\\)"                    #Xe12c)
              ("\\(/==\\)"                   #Xe12d)
              ("\\(/>\\)"                    #Xe12e)
              ("\\(//\\)"                    #Xe12f)
              ("\\(///\\)"                   #Xe130)
              ("\\(&&\\)"                    #Xe131)
              ("\\(||\\)"                    #Xe132)
              ("\\(||=\\)"                   #Xe133)
              ("[^|]\\(|=\\)"                #Xe134)
              ("\\(|>\\)"                    #Xe135)
              ("\\(\\^=\\)"                  #Xe136)
              ("\\(\\$>\\)"                  #Xe137)
              ("\\(\\+\\+\\)"                #Xe138)
              ("\\(\\+\\+\\+\\)"             #Xe139)
              ("\\(\\+>\\)"                  #Xe13a)
              ("\\(=:=\\)"                   #Xe13b)
              ("[^!/]\\(==\\)[^>]"           #Xe13c)
              ("\\(===\\)"                   #Xe13d)
              ("\\(==>\\)"                   #Xe13e)
              ("[^=]\\(=>\\)"                #Xe13f)
              ("\\(=>>\\)"                   #Xe140)
              ("\\(<=\\)"                    #Xe141)
              ("\\(=<<\\)"                   #Xe142)
              ("\\(=/=\\)"                   #Xe143)
              ("\\(>-\\)"                    #Xe144)
              ("\\(>=\\)"                    #Xe145)
              ("\\(>=>\\)"                   #Xe146)
              ("[^-=]\\(>>\\)"               #Xe147)
              ("\\(>>-\\)"                   #Xe148)
              ("\\(>>=\\)"                   #Xe149)
              ("\\(>>>\\)"                   #Xe14a)
              ("\\(<\\*\\)"                  #Xe14b)
              ("\\(<\\*>\\)"                 #Xe14c)
              ("\\(<|\\)"                    #Xe14d)
              ("\\(<|>\\)"                   #Xe14e)
              ("\\(<\\$\\)"                  #Xe14f)
              ("\\(<\\$>\\)"                 #Xe150)
              ("\\(<!--\\)"                  #Xe151)
              ("\\(<-\\)"                    #Xe152)
              ("\\(<--\\)"                   #Xe153)
              ("\\(<->\\)"                   #Xe154)
              ("\\(<\\+\\)"                  #Xe155)
              ("\\(<\\+>\\)"                 #Xe156)
              ("\\(<=\\)"                    #Xe157)
              ("\\(<==\\)"                   #Xe158)
              ("\\(<=>\\)"                   #Xe159)
              ("\\(<=<\\)"                   #Xe15a)
              ("\\(<>\\)"                    #Xe15b)
              ("[^-=]\\(<<\\)"               #Xe15c)
              ("\\(<<-\\)"                   #Xe15d)
              ("\\(<<=\\)"                   #Xe15e)
              ("\\(<<<\\)"                   #Xe15f)
              ("\\(<~\\)"                    #Xe160)
              ("\\(<~~\\)"                   #Xe161)
              ("\\(</\\)"                    #Xe162)
              ("\\(</>\\)"                   #Xe163)
              ("\\(~@\\)"                    #Xe164)
              ("\\(~-\\)"                    #Xe165)
              ("\\(~=\\)"                    #Xe166)
              ("\\(~>\\)"                    #Xe167)
              ("[^<]\\(~~\\)"                #Xe168)
              ("\\(~~>\\)"                   #Xe169)
              ("\\(%%\\)"                    #Xe16a)
             ;; ("\\(x\\)"                   #Xe16b) This ended up being hard to do properly so i'm leaving it out.
              ("[^:=]\\(:\\)[^:=]"           #Xe16c)
              ("[^\\+<>]\\(\\+\\)[^\\+<>]"   #Xe16d)
              ("[^\\*/<>]\\(\\*\\)[^\\*/<>]" #Xe16f))))

  (defun add-fira-code-symbol-keywords ()
    (font-lock-add-keywords nil fira-code-font-lock-keywords-alist))

  (add-hook 'prog-mode-hook
            #'add-fira-code-symbol-keywords)
#+END_SRC

*** Tests for Howard Abrams "ha/" org-mode configuration

**** darwin

#+BEGIN_SRC sh
  brew tap caskroom/fonts
  # Both of these work
  brew cask install font-hasklig
  # brew cask install font-hasklig-nerd-font
#+END_SRC

**** TODO windows

see: https://github.com/i-tu/Hasklig

#+BEGIN_SRC sh
build.cmd
#+END_SRC

**** any OS

#+BEGIN_SRC emacs-lisp
  (defvar ha/fixed-font-family
    (cond ((x-list-fonts "Source Code Pro")       "Source Code Pro")
          ((x-list-fonts "Anonymous Pro")         "Anonymous Pro")
          ((x-list-fonts "M+ 1mn")                "M+ 1mn"))
    "My fixed width font based on what is installed, `nil' if not defined.")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defvar ha/variable-font-tuple
  (cond ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
        ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
        ((x-list-fonts "Verdana")         '(:font "Verdana"))
        ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
        (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro.")))
  "My variable width font available to org-mode files and whatnot.")
#+END_SRC

** IN_PROGRESS Themes
*** Convenient theme functions

    I nabbed these from [[https://github.com/danielmai/.emacs.d/blob/master/config.org#convenient-theme-functions][Daniel Mai]]. They're great!

#+begin_src emacs-lisp :tangle
  (defun switch-theme (theme)
    "Disables any currently active themes and loads THEME."
    ;; This interactive call is taken from `load-theme'
    (interactive
     (list
      (intern (completing-read "Load custom theme: "
                               (mapc 'symbol-name
                                     (custom-available-themes))))))
    (let ((enabled-themes custom-enabled-themes))
      (mapc #'disable-theme custom-enabled-themes)
      (load-theme theme t)))

  (defun disable-active-themes ()
    "Disables any currently active themes listed in `custom-enabled-themes'."
    (interactive)
    (mapc #'disable-theme custom-enabled-themes))

  (bind-key "s-<f12>" 'switch-theme)
  (bind-key "s-<f11>" 'disable-active-themes)
#+end_src

*** IN_PROGRESS Howard Abrams 
    :PROPERTIES: 
    :Visibility: CHILDREN
    :END:      

    After watching Howard Abrams video [[https://www.youtube.com/watch?v=RhYNu6i_uY4][Introduction to EShell]], I was
    really impressed with his color scheme. So I checked out his emacs
    config for his [[https://github.com/howardabrams/dot-files/blob/master/emacs-client.org#color-theme][Color Theme]]. 

    His note:

#+BEGIN_QUOTE
The color themes work quite well, except they don’t know about the
org-mode source code blocks, so we need to set up a couple functions
that we can use to set them.
#+END_QUOTE

My note: I needed to manually create this directory to avoid an error
on startup: ~/.emacs.d/elpa/color-theme-20070910.1007/themes

#+BEGIN_SRC emacs-lisp
  (use-package color-theme
    :ensure t
    :init (require 'color-theme)
    :config (use-package color-theme-sanityinc-tomorrow
              :ensure t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun org-src-color-blocks-light ()
    "Colors the block headers and footers to make them stand out more for lighter themes"
    (interactive)
    (custom-set-faces
     '(org-block-begin-line
      ((t (:underline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF"))))
     '(org-block-background
       ((t (:background "#FFFFEA"))))
     '(org-block
       ((t (:background "#FFFFEA"))))
     '(org-block-end-line
       ((t (:overline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF"))))))

  (defun org-src-color-blocks-dark ()
    "Colors the block headers and footers to make them stand out more for dark themes"
    (interactive)
    (custom-set-faces
     '(org-block-begin-line
       ((t (:foreground "#008ED1" :background "#002E41"))))
     '(org-block-background
       ((t (:background "#000000"))))
     '(org-block
       ((t (:background "#000000"))))
     '(org-block-end-line
       ((t (:foreground "#008ED1" :background "#002E41"))))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (deftheme ha/org-theme "Sub-theme to beautify org mode")
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun ha/change-theme (theme org-block-style)
    "Changes the color scheme and reset the mode line."
    (funcall theme)
    (funcall org-block-style)

    (let* ((ha/fixed-font-tuple (list :font ha/fixed-font-family))
           ; (ha/varible-font-tuple (list :font ha/variable-font-family))
           (base-font-color     (face-foreground 'default nil 'default))
           (background-color    (face-background 'default nil 'default))
           (primary-color       (face-foreground 'mode-line nil))
           (secondary-color     (face-background 'secondary-selection nil 'region))
           (base-height         (face-attribute 'default :height))
           (headline           `(:inherit default :weight bold :foreground ,base-font-color)))

      (when ha/fixed-font-family
        (set-frame-font ha/fixed-font-family)
        (set-face-attribute 'default nil :font ha/fixed-font-family :height 140)
        (set-face-font 'default ha/fixed-font-family))

      ;; Noticeable?
      ;; (set-face-attribute 'region nil :background "#ffff50" :foreground "black")
      ;; Subtle?
      (set-face-attribute 'region nil :background "#0000bb" :foreground 'unspecified)

      (custom-theme-set-faces 'ha/org-theme
                              `(org-agenda-structure ((t (:inherit default :height 2.0 :underline nil))))
                              `(org-verbatim ((t (:inherit 'fixed-pitched :foreground "#aef"))))
                              `(org-table ((t (:inherit 'fixed-pitched))))
                              `(org-block ((t (:inherit 'fixed-pitched))))
                              `(org-block-background ((t (:inherit 'fixed-pitched))))
                              `(org-block-begin-line ((t (:inherit 'fixed-pitched))))
                              `(org-block-end-line ((t (:inherit 'fixed-pitched))))
                              `(org-level-8 ((t (,@headline ,@ha/variable-font-tuple))))
                              `(org-level-7 ((t (,@headline ,@ha/variable-font-tuple))))
                              `(org-level-6 ((t (,@headline ,@ha/variable-font-tuple))))
                              `(org-level-5 ((t (,@headline ,@ha/variable-font-tuple))))
                              `(org-level-4 ((t (,@headline ,@ha/variable-font-tuple
                                                            :height 1.1))))
                              `(org-level-3 ((t (,@headline ,@ha/variable-font-tuple
                                                            :height 1.1))))
                              `(org-level-2 ((t (,@headline ,@ha/variable-font-tuple
                                                            :height 1.1))))
                              `(org-level-1 ((t (,@headline ,@ha/variable-font-tuple
                                                            :height 2.1))))
                              `(org-document-title ((t (,@headline ,@ha/variable-font-tuple :height 1.5 :underline nil)))))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (ha/change-theme 'color-theme-sanityinc-tomorrow-night 'org-src-color-blocks-dark)

  (custom-set-faces
   '(mode-line           ((t (:background "blue4"   :foreground "gray90"))))
   '(mode-line-inactive  ((t (:background "#404045" :foreground "gray60"))))
   '(mode-line-buffer-id ((t (                      :foreground "gold1"   :weight ultra-bold))))
   '(which-func          ((t (                      :foreground "orange"))))
   '(show-paren-match    ((t (:background "default" :foreground "#afa"    :weight ultra-bold))))
   '(show-paren-mismatch ((t (:background "default" :foreground "#cc6666" :weight ultra-bold)))))

  (set-face-attribute 'region nil :background "#00a")
#+END_SRC

*** Cyberpunk theme

The [[https://github.com/n3mo/cyberpunk-theme.el][cyberpunk theme]] is dark and colorful. However, I don't like the
boxes around the mode line.

#+begin_src emacs-lisp :tangle no
(use-package cyberpunk-theme
  :if (window-system)
  :ensure t
  :init
  (progn
    (load-theme 'cyberpunk t)
    (set-face-attribute `mode-line nil
                        :box nil)
    (set-face-attribute `mode-line-inactive nil
                        :box nil)))
#+end_src
*** Monokai theme

#+begin_src emacs-lisp :tangle no
(use-package monokai-theme
  :if (window-system)
  :ensure t
  :init
  (setq monokai-use-variable-pitch nil))
#+end_src

** Tabs

   When adding a new mode which has its own name for a tab variable,
   add it to the list below. Then changing `tab-width` will change all
   the other values.

   #+BEGIN_SRC emacs-lisp
     (setq-default tab-width 2)                      ; or any other preferred value
     (let ((tab-variables `(c-basic-offset
                            py-indent-offset
                            sgml-basic-offset
                            css-indent-offset
                            web-mode-code-indent-offset
                            web-mode-markup-indent-offset
                            web-mode-code-indent-offset
                            js-indent-level
                            js2-indent-level
                            coffee-tab-width
                            json-reformat:indent-width
                            )))
       (dolist (tab-var tab-variables)
         (defvaralias tab-var 'tab-width)))
   #+END_SRC

*** Internal tabs

To use this: (self-note: recall I have super "s" bound to Alt on Darwin)

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "s-i") 'indent-relative)
#+END_SRC

Suppose I have code like below and I want to indent the first t with
the nil above. 

#+BEGIN_SRC emacs-lisp :tangle no
  (setq helm-locate-command                   "mdfind -interpret -name %s %s"
        helm-ff-newfile-prompt-p              nil
        helm-M-x-fuzzy-match t
        helm-ff-file-name-history-use-recentf t)
#+END_SRC

I would place my cursor on that first t and type s-i to do it.

** Toolbar off

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
#+END_SRC

** Newlines

   from: http://stackoverflow.com/questions/730751/hiding-m-in-emacs

#+BEGIN_SRC emacs-lisp
(defun remove-dos-eol ()
  "Do not show ^M in files containing mixed UNIX and DOS line endings."
  (interactive)
  (setq buffer-display-table (make-display-table))
  (aset buffer-display-table ?\^M []))
#+END_SRC

** Automatically setting modes

   Most modes seem to recoginze the right file names when loading, but
   these need to be set here.

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.aliases$" . sh-mode))
     ;; for freemind mindmaps, yes conflicts with .mm files in Objective C
     (add-to-list 'auto-mode-alist '("\\.mm$" . xml-mode))
   #+END_SRC

** Whitespace

   #+BEGIN_SRC emacs-lisp
     ;; automatically clean up bad whitespace
     (setq whitespace-action '(auto-cleanup))
   #+END_SRC

** Fix fancy prompt fonts (oh-my-zsh agnoster) in emacs shell (on Darwin at least)

   I was testing VS Code (which I occasionally consider switching to
   from emacs, but I keep coming back) and I found this [[https://medium.com/@hippojs.guo/vs-code-fix-fonts-in-terminal-761cc821ef41][blog post]] when
   trying to fix the terminal font. I was excited to see it also fixed
   my shell prompt (M-x shell) in emacs too!

   Rough instructions from blog:

   In OS X terminal preferences

      - cmd-,
      - Profiles
      - <YOURNAME>(Default) 
      - Font: "Meslo LG M DZ Regular for Powerline 14 pt."

   Your font name may vary...

** Zooming DISABLED (does weird things on mac)

   Just use these to in/de-crease font sizes
   C-x C-= (like plus) 
   C-x C-- (like minus) 

   #+BEGIN_SRC emacs-lisp :tangle no
     ;; Zoom in and out
     ;; from: http://blog.vivekhaldar.com/post/4809065853/dotemacs-extract-interactively-change-font-size

     (defun zoom-in ()
       "Increase font size by 10 points."
       (interactive)
       (set-face-attribute 'default nil
                           :height
                           (+ (face-attribute 'default :height)
                              10)))

     (defun zoom-out ()
       "Decrease font size by 10 points."
       (interactive)
       (set-face-attribute 'default nil
                           :height
                           (- (face-attribute 'default :height)
                              10)))

     ;; change font size, interactively
     (global-set-key (kbd "C-.") 'zoom-in)
     (global-set-key (kbd "C-,") 'zoom-out) ; overrides org-cycle-agenda-files
   #+END_SRC

** Babel

   [[http://orgmode.org/worg/org-contrib/babel][Babel]] is Org-mode's ability to execute source code within Org-mode documents.

   #+BEGIN_SRC emacs-lisp
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((C . t)
        (css . t)
        (emacs-lisp . t)
        (haskell . t)
        (python . t)
        (ruby . t)
        (shell . t)
        ))
     ;;   (coq . t)
     ;;   (cpp . t) ; C++
     ;;   (prolog . t)

     (defun my-org-confirm-babel-evaluate (lang body)
       (not (or (string= lang "C")
                (string= lang "emacs-lisp")
                (string= lang "haskell")
                (string= lang "python")
                (string= lang "ruby")
                ;; (string= lang "shell") ;; commented = do confirm
                )))
     (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)

   #+END_SRC

** "Edit With Emacs" [[https://chrome.google.com/webstore/detail/edit-with-emacs/ljobjlafonikaiipfkggjbhkghgicgoh?hl=en][Chrome plugin]]

   Following Daniel Mai again here to use Emacs to edit posts on
   Discourse, which has a post editor that overrides normal Emacs key
   bindings with other functions. As such, ~markdown-mode~ is used.

   #+begin_src emacs-lisp
     (use-package edit-server
       :ensure t
       :config
       (progn
         (edit-server-start)
         (setq edit-server-default-major-mode 'markdown-mode)
         (setq edit-server-new-frame nil)))
   #+end_src

** Private

   Load private data, for example, I have a google api key set as
   goo-api-key for url shortening.

   TODO: Maybe I should set a list of files above under "Use dropbox"
   and load each one of them. Dangerous if anyone ever has access to
   that directory but they should not.

   #+BEGIN_SRC emacs-lisp
     (let ((private-data-file (concat user-emacs-directory "private.el")))
       (if (file-exists-p private-data-file)
           (progn
             (message (concat "loading " private-data-file))
             (load private-data-file))))
   #+END_SRC

** Emacsclient

#+begin_src emacs-lisp
(use-package server
  :config
  (server-start))
#+end_src
* Modes (Alphabetical)
** Ag
   #+begin_src emacs-lisp
     (add-hook 'ag-mode-hook
               (lambda ()
                 (progn
                   (message "Truncating long lines in ag-mode...")
                   (toggle-truncate-lines t))))
   #+end_src
** Autopair

   #+begin_src emacs-lisp
     (use-package autopair
       :defer t
       :ensure t
       :config
       (autopair-global-mode) ;; to enable in all buffers
     )
   #+end_src

** C# (don't judge)

   #+begin_src emacs-lisp
     (use-package csharp-mode
       :defer t
       :ensure t)
   #+end_src

** Coffee-mode

   #+begin_src emacs-lisp
     (use-package coffee-mode
       :defer t
       :ensure t
       :config
       (progn
         (add-hook 'coffee-after-compile-hook 'sourcemap-goto-corresponding-point)
         ;; (define-key coffee-mode-map [(meta r)] 'coffee-compile-buffer)
         ;; (define-key coffee-mode-map (kbd "C-j") 'coffee-newline-and-indent))
         ))
   #+end_src
** CSS mode

   #+BEGIN_SRC emacs-lisp
     (add-hook 'css-mode-hook (lambda () (rainbow-mode t)))
   #+END_SRC
** Company mode

   Auto completion, perhaps a better or more currently maintained
   package compared to [[https://www.emacswiki.org/emacs/AutoComplete][AutoComplete]], but research the blogosphere to
   make your own decisions. I had never used either and I'm starting
   with company mode. 

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (add-hook 'after-init-hook 'global-company-mode)  
    (setq company-tooltip-limit 20)                      ; bigger popup window
    (setq company-idle-delay .3)                         ; decrease delay before autocompletion popup shows
    (setq company-echo-delay 0)                          ; remove annoying blinking
    (setq company-begin-commands '(self-insert-command)) ; start autocompletion only after typing
    (setq company-minimum-prefix-length 3)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous))
#+END_SRC

For file completion with golang you will need ~gocode~. See [[https://github.com/mdempsky/gocode][mdempysky's
repo]] for instructions. Under emacs, it lists usage with autocomplete,
but once you install it on your system correctly, company mode should
be able to find it.

#+BEGIN_SRC emacs-lisp
  (use-package company-go
    :ensure t
    :config
    (add-hook 'go-mode-hook (lambda ()
                              (set (make-local-variable 'company-backends) '(company-go))
                              (company-mode))))
#+END_SRC

** Clojure mode

   Debugging this. Running clojure-mode still causes this error for
   me: 

   load-with-code-conversion: Symbol's value as variable is void: <!DOCTYPE

#+BEGIN_SRC emacs-lisp :tangle no 
  (use-package clojure-mode
    :ensure t
    :mode (("\\.clj$" . clojure-mode))
    )
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no 
  (use-package clojure-mode
    :ensure t
    :mode (("\\.clj$" . clojure-mode))
    :config
    (progn
      ;; require or autoload paredit-mode
      (add-hook 'clojure-mode-hook #'paredit-mode)
      ;; require or autoload smartparens
      ;; (add-hook 'clojure-mode-hook #'smartparens-strict-mode)
      ))
#+END_SRC

** Emmet

   According to [[http://emmet.io/][their website]], "Emmet — the essential toolkit for web-developers."

   #+begin_src emacs-lisp
     (use-package emmet-mode
       :ensure t
       :commands emmet-mode
       :config
       (progn
         (add-hook 'html-mode-hook 'emmet-mode)
         (add-hook 'css-mode-hook 'emmet-mode)
         (add-hook 'sass-mode-hook 'emmet-mode)
         (add-hook 'sgml-mode-hook 'emmet-mode))
       )
   #+end_src

** Ediff

   #+BEGIN_SRC emacs-lisp
     (setq ediff-split-window-function 'split-window-horizontally)
     (setq ediff-highlight-all-diffs 'nil)

     ;; rod bogart kicks ass!
     ;; these probably went with an alias
     ;; alias ediff='emacs --eval cmd-ediff'
     ;; usage: ediff FILE1 FILE2
     (defun cmd-ediff ()
       "A command line access to ediff."
       (interactive)
       (let ((buf1 (current-buffer)))
         (other-window 1)
         (ediff-buffers (current-buffer) buf1)))
   #+END_SRC

** Emacs SQL-PSQL (postgress) disbled/LOOKAT

   #+begin_src emacs-lisp :tangle no

     (use-package emacsql-psql
       :ensure t
     )
   #+end_src

** Exec path from shell

   So emacs can also find executables (like "coffee" for coffee-repl).
   See [[https://github.com/purcell/exec-path-from-shell][repo  documentation]].

   I should go over all of [[https://github.com/danielmai/.emacs.d/blob/master/config.org#mac-customizations][Daniel's Mac customizations]] and put this in Settings.

   #+begin_src emacs-lisp
     (use-package exec-path-from-shell
       :if (memq window-system '(mac ns))
       :ensure t
       :init
       (exec-path-from-shell-initialize))
   #+end_src

** Flycheck

   #+begin_src emacs-lisp
     (use-package flycheck
       :ensure t
       :config
       (progn
         (setq-default flycheck-html-tidy-executable
                       "/usr/local/Cellar/tidy-html5/5.2.0/bin/tidy")
         (setq-default flycheck-javascript-jshint-executable
                       "/usr/local/bin/jshint")
         (setq-default flycheck-disabled-checkers
                       (append flycheck-disabled-checkers
                               '(javascript-jshint)))
         (setq-default flycheck-temp-prefix ".flycheck")
         (setq-default flycheck-disabled-checkers
                       (append flycheck-disabled-checkers
                               '(json-jsonlist)))

         (flycheck-add-mode 'javascript-eslint 'web-mode)
         (global-flycheck-mode)))
   #+end_src

*** Linter setups

    Install the HTML5/CSS/JavaScript linters.

    #+begin_src sh
      pip install pylint
      brew install tidy-html5
      # npm install -g jshint # now using eslint
      npm install -g csslint
    #+end_src

    eslint setup from this [[http://codewinds.com/blog/2015-04-02-emacs-flycheck-eslint-jsx.html][blogpost]] including this emacs-lisp code

#+BEGIN_SRC emacs-lisp
  ;; use local eslint from node_modules before global
  ;; http://emacs.stackexchange.com/questions/21205/flycheck-with-file-relative-eslint-executable
  (defun my/use-eslint-from-node-modules ()
    (let* ((root (locate-dominating-file
                  (or (buffer-file-name) default-directory)
                  "node_modules"))
           (eslint (and root
                        (expand-file-name "node_modules/eslint/bin/eslint.js"
                                          root))))
      (when (and eslint (file-executable-p eslint))
        (setq-local flycheck-javascript-eslint-executable eslint))))

  (add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)

  ;; for better jsx syntax-highlighting in web-mode
  ;; - courtesy of Patrick @halbtuerke
  (defadvice web-mode-highlight-part (around tweak-jsx activate)
    (if (equal web-mode-content-type "jsx")
      (let ((web-mode-enable-part-face nil))
        ad-do-it)
      ad-do-it))
#+END_SRC

** Golang

   #+begin_src emacs-lisp
     (use-package go-mode
       :defer t
       :ensure t
       :config
       (add-hook 'before-save-hook #'gofmt-before-save))
   #+end_src

** Grep

   #+BEGIN_SRC emacs-lisp
     (add-hook 'grep-mode-hook
               '(lambda ()
                  (progn
                    (message "Truncating long lines in grep mode...")
                    (toggle-truncate-lines t))))
   #+END_SRC

** Helm

   More code from [[https://github.com/danielmai/.emacs.d/blob/master/config.org#helm][Daniel Mai]] (which I've now customized). Helm looks
   to me like one of the biggest boosts in emacs productivity since I
   took a break from using it. I would think every emacs user would
   eventually want to use it. Though it does have a learning curve.
   You should consider the [[https://tuhdo.github.io/helm-intro.html][tutorial]]. I've mostly started with videos
   on youtube to get started.

   From my limited investigations, I believe that Helm (with
   Helm-swoop) does everything you'd want from Ivy, Swiper, and
   Counsel. 

   #+BEGIN_SRC emacs-lisp
     (use-package helm
       :ensure t
       :diminish helm-mode
       :init (progn
               (require 'helm-config)
               (use-package helm-projectile
                 :ensure t
                 :commands helm-projectile
                 :bind ("C-c p h" . helm-projectile))
               (use-package helm-ag :defer 10  :ensure t)
               (setq helm-locate-command                   "mdfind -interpret -name %s %s"
                     helm-ff-newfile-prompt-p              nil
                     helm-M-x-fuzzy-match                  t
                     helm-ff-file-name-history-use-recentf t)
               (helm-mode)
               ;; use <tab> to select files instead of <return>
               ;; If you need it, C-i will do what <return> used to do
               (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
               (use-package helm-swoop
                 :ensure t
                 :bind ("M-s s" . helm-swoop)))
       :bind (("C-c h" . helm-command-prefix)
              ("C-x b" . helm-mini)
              ("C-x r b" . helm-bookmarks)
              ("C-`" . helm-resume)
              ("M-x" . helm-M-x)
              ("M-y" . helm-show-kill-ring)
              ("C-x C-f" . helm-find-files)))
   #+END_SRC

** Hide-Show
   for hs-minor-mode

   Glbally hyper h/t will hide/toggle, enabling hs-minor-mode if necessary.

   So you can just move to a code block and H-h to hide it or H-t to toggle.

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "H-h") 'enable-hs-and-hide-block)
     (global-set-key (kbd "H-s") (kbd "C-c @ C-s")) ; show block
     (global-set-key (kbd "H-t") 'enable-hs-and-toggle-hiding)

     (defun enable-hs-and-hide-block ()
       "Enable hs-minor-mode if it isn't on and hide the source block"
       (interactive)
       (unless (bound-and-true-p hs-minor-mode)
           (hs-minor-mode 1)
           (message "hs-minor-mode enabled"))
       (hs-hide-block))

     (defun enable-hs-and-toggle-hiding ()
       "Enable hs-minor-mode if it isn't on and toggle-hiding"
       (interactive)
       (unless (bound-and-true-p hs-minor-mode)
           (hs-minor-mode 1)
           (message "hs-minor-mode enabled"))
       (hs-toggle-hiding))
   #+END_SRC
** HTML

   See also useful commands [[*html-mode][html-mode]]

   #+BEGIN_SRC emacs-lisp
     (defun my-html-mode-hook ()
       (linum-mode 1)
       (column-number-mode 1)
       (message "Truncating long lines in html mode...")
       (toggle-truncate-lines t)
       )
     (add-hook 'html-mode-hook 'my-html-mode-hook)
   #+END_SRC

** Livescript

   #+begin_src emacs-lisp
     (use-package livescript-mode
       :defer t
       :ensure t
       :config
       (add-hook 'livescript-after-compile-hook 'sourcemap-goto-corresponding-point)
       )
   #+end_src

** Ido

   See also useful commands [[*ido-mode][ido-mode]]

   #+begin_src emacs-lisp
     (use-package ido
       :init
       (setq ido-enable-flex-matching t)
       (setq ido-everywhere t)
       (ido-mode t)
       (use-package ido-vertical-mode
         :ensure t
         :defer t
         :init (ido-vertical-mode 1)
         (setq ido-vertical-define-keys 'C-n-and-C-p-only)))
   #+end_src
** JS2
   #+begin_src emacs-lisp
          (use-package js2-mode
            :defer t
            :ensure t
            :config
            (progn
              (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
              (add-to-list 'interpreter-mode-alist '("node" . js2-mode))
              (setq js2-basic-offset 2))
            )
   #+end_src
** JSON
   #+begin_src emacs-lisp
     (use-package json-mode
       :config
       (add-to-list 'auto-mode-alist '("\\.json$" . json-mode))
       )
   #+end_src
** Smartscan

   Quickly move to previous and next symbol under the cursor (or replace)

   #+begin_src emacs-lisp
     (use-package smartscan
       :ensure t
       :config (add-hook 'prog-mode-hook 'smartscan-mode)
       :bind (("M-n" . smartscan-symbol-go-forward)
              ("M-p" . smartscan-symbol-go-backward)
              ("M-'" . smartscan-symbol-replace) ; overrides abbrev-prefix-mark
              ))
   #+end_src

** Magit

A great interface for git projects. It's much more pleasant to use
than the git interface on the command line. Use an easy keybinding to
access magit.

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :bind ("C-c g" . magit-status)
    :config
    (define-key magit-status-mode-map (kbd "q") 'magit-quit-session))
#+end_src

** Markdown
   #+begin_src emacs-lisp
     (use-package markdown-mode
       :defer t
       :ensure t)
   #+end_src

** Multiple Cursors

   For some reason I need to require 'cl. Some of the mc libraries
   require 'cl-lib, but that doesn't seem to be enough.

   Refer to the [[https://github.com/magnars/multiple-cursors.el][source]] for examples.

   #+begin_src emacs-lisp
     (use-package multiple-cursors
       :ensure t
       :init
       (require 'cl)
       :bind (("C-S-c C-S-c" . mc/edit-lines)
              ("C->"         . mc/mark-next-like-this)
              ("C-<"         . mc/mark-previous-like-this)
              ("C-c C-<"     . mc/mark-all-like-this)
              ("C-!"         . mc/mark-next-symbol-like-this)
              ("s-d"         . mc/mark-all-dwim)))
   #+end_src

   "s-d" is super-d (I've bound super to option)

   Special:

   mc/mark-sgml-tag-pair: Mark the current opening and closing tag.
                          Also try mc/mark-all-like-this-dwim in a tag

   Mark the region, then
   mc/edit-beginnings-of-lines

   mc/insert-numbers: Insert increasing numbers for each cursor, top to bottom.
                      mv/i-n
   mc/insert-letters: Insert increasing letters for each cursor, top to bottom.
                      mv/i-l

*** To use:

**** replacing the same word

     If you have

     print "foo", foo

     You can change both foos to bar by:
     1. Select the first foo in a region (move to 1st f, C-space, M-f)
     2. C-> (to start multiple-cursors)
     3. type "bar"
     4. C-g or <return> to end

**** replacing a similar pattern of symbols

     If you have

     foo: one
     barr: two
     bazzz: three
     quux: four

     You can select ": " and mc/mark-all-like-this or s-d for
     mc/mark-all-dwim, then start typing (you'll need to retype ": "
     or you can kill and yank it back, first thing if you want to keep
     it).

     While editing, you can use C-' to hide all non-edited text

     test: this is extra text, not to be modified

** Octave

   Decide if I still need this (from [[https://www.gnu.org/software/octave/doc/v4.0.0/Using-Octave-Mode.html][Using Octave Mode]]):

   Note there is no final "e" in "octave-mod"

   Also the autoload is disabled because it actually interferes with
   octave mode which should be set up by default according to [[https://lists.gnu.org/archive/html/help-octave/2015-07/msg00291.html][this]].

   #+BEGIN_SRC emacs-lisp
     ; (autoload 'octave-mode "octave-mod" nil t)

     ; Do this otherwise objective-c mode is set
     (setq auto-mode-alist
           (cons '("\\.m$" . octave-mode) auto-mode-alist))

     (add-hook 'octave-mode-hook
               (lambda ()
                 (abbrev-mode 1)
                 (auto-fill-mode 1)
                 (if (eq window-system 'x)
                     (font-lock-mode 1))))
   #+END_SRC

** Org mode
*** key bindings

    See also useful commands [[*org-mode][org-mode]]

    #+begin_src emacs-lisp
      (bind-key "C-c l" 'org-store-link)
      (bind-key "C-c c" 'org-capture)
      (bind-key "C-c a" 'org-agenda)
      (global-set-key "\C-cb" 'org-iswitchb)
    #+end_src

*** Org-capture

    org-directory is set to ~/org by default, so I might do something like:

    #+BEGIN_SRC sh
      ln -si ~/Dropbox/home/org ~/
    #+END_SRC

    or

    #+BEGIN_SRC sh
      ln -si ~/Dropbox/work/org ~/
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (setq org-default-notes-file (concat org-directory "/captured_notes.org"))
    #+END_SRC

*** Org-bullets
    #+BEGIN_SRC emacs-lisp
      (use-package org-bullets
        :ensure t)
    #+END_SRC

*** Org hide markers

    #+BEGIN_SRC emacs-lisp
      (setq org-hide-emphasis-markers t)
    #+END_SRC

*** Hooks

    The clocking expressions are for [[http://orgmode.org/manual/Clocking-work-time.html][clocking work time]].

    #+BEGIN_SRC emacs-lisp
      (add-hook 'org-mode-hook (lambda ()
                                 (setq org-clock-persist 'history)
                                 (org-clock-persistence-insinuate)
                                 (org-bullets-mode 1)
                                 (auto-fill-mode 1)
                                 ; (indent-tabs-mode t)
                                 ))
    #+END_SRC

*** Todo

    #+BEGIN_SRC emacs-lisp
      (setq org-todo-keywords
            '((sequence "TODO" "IN_PROGRESS" "|" "DONE")))
    #+END_SRC

** Org-Jira

   #+begin_src emacs-lisp
     (use-package org-jira
       :defer t
       :ensure t
       :config
       (setq jiralib-url "https://udacity.atlassian.net")
       )
   #+end_src

** osx-plist

   For use with [[https://github.com/tedroden/textexpander-sync-el/blob/master/textexpander-sync.el][textexpander-sync-el]]

#+BEGIN_SRC  emacs-lisp
  (use-package osx-plist
    :no-require)
#+END_SRC

** Package

   #+BEGIN_SRC emacs-lisp
     (add-hook 'package-menu-mode-hook
               (lambda ()
                 (progn
                   (message "Truncating long lines in package menu mode...")
                   (toggle-truncate-lines t))))
   #+END_SRC
** Phi-search, Phi-replace, Phi-search-mc

   works with multiple cursors

   #+BEGIN_SRC emacs-lisp
     (use-package phi-search
       :defer t
       :ensure t
       :config
       (require 'phi-replace)
       (global-set-key (kbd "M-%") 'phi-replace-query))
   #+END_SRC

   Not sure how this works yet: 

   #+BEGIN_SRC emacs-lisp 
     (use-package phi-search-mc
       :defer t
       :ensure t)
   #+END_SRC

** "Pretty C-l"

   Display Control-l characters in a pretty way

   #+begin_src emacs-lisp
     (use-package pp-c-l
       :ensure t
       :config
       (pretty-control-l-mode 1)
       )
   #+end_src

** Python

   See also useful commands [[*python-mode][python-mode]]

   #+begin_src emacs-lisp
     (use-package python-mode
       :defer t
       :ensure t
       :config
       (python-shell-interpreter "ipython"))
   #+end_src

** Projectile

   #+BEGIN_QUOTE
   Project navigation and management library for Emacs.
   #+END_QUOTE

  http://batsov.com/projectile/

   #+begin_src emacs-lisp
     (use-package projectile
       :ensure t
       :diminish projectile-mode
       :commands projectile-mode
       :config
       (progn
         (projectile-global-mode t)
         (setq projectile-enable-caching t)
         (use-package ag
           :commands ag
           :ensure t)))
   #+end_src

** Rainbow Mode

   #+begin_src emacs-lisp
     (use-package rainbow-mode
       :ensure t)
   #+end_src

** Recentf

   Recentf is a minor mode that builds a list of recently opened
   files. This list is is automatically saved across sessions on
   exiting Emacs - you can then access this list through a command or
   the menu.

   https://www.emacswiki.org/emacs/RecentFiles

   #+begin_src emacs-lisp
     (use-package recentf
       :bind ("C-x C-r" . helm-recentf)
       :config
       (progn
         (recentf-mode t)
         (setq recentf-max-saved-items 200)))
   #+end_src

** Sass

   #+begin_src emacs-lisp
     (use-package sass-mode
       :defer t
       :ensure t
       :config
       (progn
         (linum-mode 1)
         (rainbow-mode t))
       )
   #+end_src

** Solidity

#+BEGIN_SRC emacs-lisp
  (use-package solidity-mode
    :defer t
    :ensure t
    :config
    (progn
      (linum-mode 1)
      (setq solidity-comment-style 'slash)
      (define-key solidity-mode-map (kbd "C-c C-g") 'solidity-estimate-gas-at-point)
      ))
#+END_SRC

** TextExpander

   I use [[https://smilesoftware.com/textexpander][TextExpander]] on OS X and [[http://www.16software.com/breevy/][Breevy]] on Windows sharing my
   textexpander settings through Dropbox. Now I can have them in emacs
   too. If you're thinking about the same, note I decided to abandon
   using non-word characters like semi-colon ";" in my abbreviations
   to make everything work everywhere. 

   #+BEGIN_SRC emacs-lisp
     (use-package textexpander-sync
       :no-require
       :load-path "~/.emacs.d/site-lisp"
       :init
       (setq textexpander-sync-file "~/Dropbox/TextExpander/Settings.textexpander")
       (setq-default abbrev-mode t)) ; setq-default to set this globally
   #+END_SRC
   
** TLA Mode

   Note to self: I should post my fix 

   #+BEGIN_SRC emacs-lisp
     (use-package tla-mode
       :no-require
       :load-path "~/.emacs.d/site-lisp")
   #+END_SRC

** URL Shortener

   Need google-access-token ... see private-data-file

   #+begin_src emacs-lisp
     (use-package url-shortener
       :defer t
       :ensure t)
   #+end_src

   Use:

   M-x goo-url-shorten
   M-x goo-url-expand

** Visual-regexp

    #+BEGIN_SRC emacs-lisp
      (use-package visual-regexp
        :ensure t
        :init  
        (use-package pcre2el :ensure t)
        (use-package visual-regexp-steroids :ensure t)
        :bind (("C-c r" . vr/replace)
               ("C-c q" . vr/query-replace)
               ("C-c m" . vr/mc-mark) ; Need multiple cursors
               ("C-M-r" . vr/isearch-backward)
               ("C-M-s" . vr/isearch-forward)))
    #+END_SRC

   Usage reminder

   C-c q -> enter pattern to search for -> enter pattern for query replacement
   C-c m -> enter pattern to search for -> start typing in multiple cursor mode

   Note: expressions are in python

   Multiplying all numbers of at least two digits by 3:

   C-c r
   (\d{2,})
   C-c C-c (expression mode)
   int(\1)*3
   
   1 20 3
   50 60 70
   80 90 100

   Capitalize the first letter of the string after "mc/"

   C-c r
   mc/(.)
   C-c C-c (expression mode)
   "mc/" + str(\1).upper()

   mc/mark-sgml-tag-pair: Mark the current opening and closing tag.
   mc/insert-numbers: Insert increasing numbers for each cursor, top to bottom.
   mc/insert-letters: Insert increasing letters for each cursor, top to bottom.

** Web Mode

   #+begin_src emacs-lisp
     (use-package web-mode
       :defer t
       :ensure t
       :config
       (progn
         (local-set-key "\C-cv" 'browse-url-of-file)
         (add-to-list 'auto-mode-alist '("\\.jsx$" . web-mode))
         (add-hook 'html-mode-hook 'web-mode)) ;; enable web mode in html
       )
   #+end_src

** Yaml
   #+BEGIN_SRC emacs-lisp
     (use-package yaml-mode
       :defer t
       :ensure t)
   #+END_SRC
** Yasnippet

   See also useful commands [[*yas-mode][yas-mode]]

   #+BEGIN_SRC sh
mkdir ~/.emacs.d/yasnippets
cd ~/.emacs.d/yasnippets
# if go were not included, I could do this...
# git clone https://github.com/dominikh/yasnippet-go.git
   #+END_SRC

   Do NOT use `:defer t` for yasnippet. It took me a long time to
   figure out why I always had to set global mode and reload manually
   (hint, it's becase I had defer on). Maybe this should have been
   obvious. 

   #+begin_src emacs-lisp
     (use-package yasnippet
       :ensure t
       :diminish yas-global-mode
       :config
       (yas-global-mode 1)
       (setq-default yas-snippet-dirs (append yas-snippet-dirs
                                              '("~/.emacs.d/snippets"))))
   #+end_src
** Zsh

   #+BEGIN_SRC emacs-lisp
     (setq auto-mode-alist
           (cons '("\\.zsh$" . sh-mode) auto-mode-alist))
   #+END_SRC

* Macros
** Org macros
*** "Times" macros in my times.org file :work:

    My simple experiments with tracking work. There's nothing
    really interesting here.

    #+BEGIN_SRC emacs-lisp
      ;; macros for my times.org file (org-mode specific)

      (fset 'times-last
            (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([134217788 19 42 32 60 19 67108896 19 62 67108896 tab 11 25 tab 18 42 32 60 18 67108896 5 67108896 25] 0 "%d")) arg)))

      ;; uses the yas snippet to insert to text then adds the date in org-mode
      (fset 'times-new
         [?\M-< ?\C-s ?* ?  ?< ?\C-  ?\C-a ?\C-o ?t ?i ?m ?e ?s ?- ?n ?e ?w tab ?\C-c ?. return])
    #+END_SRC

*** Convert Markdown links <-> Org-mode links

    #+BEGIN_SRC emacs-lisp
      ;; move to beginning of link before running these
      (fset 'md-link-to-org
            [?\C-s ?\] ?\( ?\C-  ?\M-z ?\) ?\) ?\C-r ?\[ ?\C-  ?\[ ?\[ ?\C-y backspace ?\] ?\C-s ?\) ?\C-  backspace backspace ?\]])

      (fset 'org-link-to-md
         [?\C-s ?\[ ?\[ ?\C-  ?\C-b ?\C-  ?\C-s ?\] ?\C-  ?\C-u ?\C-  ?\C-w backspace ?\C-s ?\] ?\] ?\C-  backspace ?\( ?\) ?\C-b ?\C-y ?\C-  ?\C-  backspace ?\C-r ?\[ ?\C-  ?\C-d ?\C-s ?\) ?\C- ])
    #+END_SRC

* Nostalgia
** January 1997
   #+BEGIN_SRC emacs-lisp :tangle no
     ;; ok, my elisp sucks at this stage, but it's a start (1/97)
     ;; durant
     ;; seems to be broken
     (defun comment-block (beg end)
       "Special commenting block for a region. Line of dashes before and after
        as long as the longest line. Strips white space off ends."
       (interactive "r")             ; ? check if already commented
       (let ((max 0)
             (dash 45)               ; 45 is the ascii value of -, "dash"
             (current beg)
             (lmargin "")            ; lmargin can be a space, " ", "> ",...
             (last-line (save-excursion
                          (goto-char end)
                          (string-to-int (substring (what-line) 5)))))
         (progn
           (goto-char current)
           (while (<= current end)
             (beginning-of-line)
             (setq line-begin (point))
             (insert lmargin)
             (end-of-line)
             (delete-horizontal-space)
             (setq len (- (point) line-begin))
             (if (< max len) (setq max len))
             (forward-line)
             (setq current (point))))
         (message "Longest line is: %d chars long." (- max (length lmargin)))
         (goto-char beg)
         (beginning-of-line)
         (setq beg (point))
         (insert-char dash max)        ; insert 'max' dashes at begining
         (insert "\n")
         (setq last-line (+ 2 last-line))    ; add two for lines of dashes
         (goto-line last-line)
         (insert-char dash max)        ; insert 'max' dashes at end
         (insert "\n")
         (comment-region beg (point))))
   #+END_SRC
** ?
   #+BEGIN_SRC emacs-lisp
     (defun insert-python-durant-debug-class ()
       "Insert my python debugging class: "
       (interactive)
       (insert "class Debug:\n")
       (insert "    \"\"\"Usage in a method call: \n")
       (insert "\n")
       (insert "    DEBUG.where(self)\n")
       (insert "\n")
       (insert "    \"\"\"\n")
       (insert "    def where(self,instance):\n")
       (insert "        # `instance.__class__` is '<class A at 10f6caa8>'\n")
       (insert "        _class = string.split(`instance.__class__`)[1]\n")
       (insert "        if string.find(_class,'.') > 0:\n")
       (insert "            _class = string.split(_class,'.')[1]\n")
       (insert "        method = traceback.extract_stack()[-2][-2]\n")
       (insert "        print \"DEBUG: In %s.%s\" % (_class,method)\n")
       (insert "\n")
       (insert "DEBUG = Debug()\n")
       (insert "\n"))

     (defun insert-python-durant-debug ()
       "Insert my python debugging string: "
       (interactive)
       (insert "DEBUG.where(self)\n")
       (insert "print '\\t ', "))
   #+END_SRC
* Understand
** Key bindings

   [[https://www.gnu.org/software/emacs/refcards/pdf/refcard.pdf][Cheatsheet for emacs v24]]

*** Prefixes
    You can see all commands that begin with a prefix by using C-h afterward,
    e.g `C-x C-h` or `C-x 4 C-h` or `C-c C-h`

    C-x is for built-in emacs commands (mnemonic emaX ?)

    C-c is for Customized (major and minor mode) commands
** Remember these!
*** Default Key bindings

    Some bindings I'm practicing remembering.

    Checkout http://orgmode.org/manual/Tables.html if you haven't seen them

    |-------------+-------------------------------------------|
    | Key Binding | Description                               |
    |-------------+-------------------------------------------|
    | C-/         | undo or expand word                       |
    |             | does expand word if at the end of a word  |
    |-------------+-------------------------------------------|
    | C-h v       | describe-variable                         |
    |             | put cursor on a variable in an elisp file |
    |             | default will be the variable              |
    |-------------+-------------------------------------------|
    | C-u C-space | cycle through previously set marks        |
    |-------------+-------------------------------------------|
    | C-x C-e     | eval last sexp                            |
    |             | Symbolic EXPression, elisp                |
    |-------------+-------------------------------------------|
    | C-x n w     | exit narrow region                        |
    |-------------+-------------------------------------------|
    | C-x n w     | exit narrow region                        |
    |-------------+-------------------------------------------|
    | C-y         | yank                                      |
    |             | M-y then cycles through kill ring         |
    |-------------+-------------------------------------------|
    | C-S-delete  | delete entire line                        |
    |-------------+-------------------------------------------|
    | C-S-down    | select until last non-empty line          |
    |             | great for code blocks                     |
    |-------------+-------------------------------------------|
    | C-M-\       | indent-region                             |
    |-------------+-------------------------------------------|
    | C-x ESC ESC | repeat-complex-command                    |
    |-------------+-------------------------------------------|
    | C-z         | zap to char                               |
    |             | remember, you can set a numeric prefix    |
    |             | `C-u 3 C-z x` to delete up to 3rd x       |
    |-------------+-------------------------------------------|
    | C-x z z z   | to repeat 3 times                         |
    |             | like . in vi                              |
    |-------------+-------------------------------------------|
    | C-x 8 <RET> | unicode, eg. snowman ☃                    |
    |             | enter unicode name,                       |
    |             | like snowman (has completions)            |
    |-------------+-------------------------------------------|
    | C-x =       | what-cursor-position                      |
    |-------------+-------------------------------------------|
    | C-x C-=     | like +, increase font of buffer           |
    |-------------+-------------------------------------------|
    | C-x C--     | decrease font of buffer                   |
    |-------------+-------------------------------------------|


    |-----------------------+-------------------------------|
    | Pattern               | Description                   |
    |-----------------------+-------------------------------|
    | C-s then C-w then C-s | select and search             |
    |                       | select moving forward by word |
    |                       | then find the selection       |
    |-----------------------+-------------------------------|
    | C-s then C-w then M-w | select and copy               |
    |-----------------------+-------------------------------|

*** Key Bindings to my functions or customized

    Definitions for these appear later in this file

    |-------------+---------------------------------|
    | Key Binding | Description                     |
    |-------------+---------------------------------|
    | H-h         | Hide a code block               |
    | H-s         | Show a code block               |
    | H-t         | Toggle hiding a code block      |
    |-------------+---------------------------------|
    | M-s o       | occur-dwim                      |
    |-------------+---------------------------------|
    | H-o         | 'browse-url-of-buffer (builtin) |
    |-------------+---------------------------------|

*** Mode specific
**** hs-minor-mode

     |-------------------+---------------------------|
     | Command           | Description               |
     |-------------------+---------------------------|
     | M-x hs-minor-mode | hide-show                 |
     |-------------------+---------------------------|
     | M-x hs-hide-all   | hide all comments         |
     |-------------------+---------------------------|
     | M-x hs-show-all   | show all (comments again) |
     |-------------------+---------------------------|

**** html-mode

     |---------+-----------------|
     | Command | Description     |
     |---------+-----------------|
     | C-c C-t | tag             |
     |---------+-----------------|
     | C-c /   | close-tag       |
     |---------+-----------------|
     | C-c C-v | view in browser |
     |---------+-----------------|

**** flycheck-mode

     |---------+-----------------------|
     | Command | Description           |
     |---------+-----------------------|
     | C-c ! v | flycheck-verify-setup |
     |---------+-----------------------|

**** ido-mode

     |---------+--------------|
     | Command | Description  |
     |---------+--------------|
     | C-f     | in ido exits |
     |---------+--------------|

**** org-mode

     |---------+-------------------------------------------|
     | Command | Description                               |
     |---------+-------------------------------------------|
     | C-c C-c | in a new #+TODO line will reload org mode |
     |---------+-------------------------------------------|
     | C-c l   | org-store-link                            |
     |---------+-------------------------------------------|
     | C-c C-l | org-insert-link                           |
     |---------+-------------------------------------------|
     | C-c *   | org-toggle-heading                        |
     |         | first select a bunch of lines to promote  |
     |---------+-------------------------------------------|
     | C-c -   | Cycle bullets (‘-’, ‘+’, ‘*’, ‘1.’, ‘1)’) |
     |         | C-x z z ... to repeat as usual            |
     |---------+-------------------------------------------|

     [[http://orgmode.org/manual/Easy-Templates.html][Easy Templates]]

     <s         then <TAB> to get a source block

     <q         then <TAB> to get a quote

**** python-mode

     |---------+----------------------------------------------------------|
     | Command | Description                                              |
     |---------+----------------------------------------------------------|
     | C-c C-c | python-shell-switch-to-shell to execute the current file |
     |---------+----------------------------------------------------------|
     | C-c C-z | python-shell-switch-to-shell to view the shell buffer    |
     |---------+----------------------------------------------------------|

**** yas-mode

     A variable can also have a default value which is specified like
     this: ${1:object}.

     see: http://blog.refu.co/?p=1355

     |-------------------------+--------------------------------------------|
     | Command                 | Description                                |
     |-------------------------+--------------------------------------------|
     | M-x yas-describe-tables | gives a table representation of all        |
     |                         | the snippets available in the current mode |
     |-------------------------+--------------------------------------------|

*** M-x commands

    |--------------------------------+--------------------|
    | Command                        | Description        |
    |--------------------------------+--------------------|
    | M-x customize-variable         |                    |
    |--------------------------------+--------------------|
    | M-x customize-face RET default |                    |
    |--------------------------------+--------------------|
    | M-x customize-group            | emacs              |
    |                                | grep               |
    |--------------------------------+--------------------|
    | M-x ffap                       | find-file-at-point |
    |--------------------------------+--------------------|
    | M-x list-colors-display        |                    |
    |--------------------------------+--------------------|

*** Clicking

    To select "org-mode-hook" with your mouse, click on the '-'
    otherwise click on "org" to select only that part.

* Test

  #+BEGIN_SRC emacs-lisp
    (defun init ()
      "Test to quickly load my init file."
      (interactive)
      (load (concat user-emacs-directory "init.el")))
  #+END_SRC
* Run Last

  Open file work_init.el or home_init.el depending on which computer
  I'm on. Since they don't belong in my repo they are listed in my
  .gitignore file.

  I use these files to open default files and set the initial window
  size. 

  #+BEGIN_SRC emacs-lisp
    (setq locations '("home" "work"))
    (dolist (loc locations)
      (let ((init-file (concat user-emacs-directory (concat loc "_init.el"))))
        (if (file-exists-p init-file)
            (progn
              (message (concat "loading " init-file))
              (load init-file)))))
  #+END_SRC
